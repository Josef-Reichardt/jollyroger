apiVersion: v1
kind: ConfigMap
metadata:
  name: nas-files-backup-config
data:
  run_backup.sh: |
    #!/bin/bash
    echo "### Install sshpass"
    apt-get update && apt-get install -y sshpass

    export BACKUP_FILE_PREFIX="nas_files_backup_"
    export BACKUP_NAS_TMP_DIR="/shares/Public/.backup_tmp/"
    export BACKUP_FILE="${BACKUP_FILE_PREFIX}$(date '+%Y-%m-%d_%H-%M-%S').tar.gz"
    echo "### Cleanup old local backupfiles ..."
    rm -fr "/tmp/${BACKUP_FILE_PREFIX}*.tar.gz"
    echo "### Backup filename will be ${BACKUP_FILE}"
    echo "### Compress backup (${NAS_SSH_USER}@${NAS_SSH_HOST} --> ${NAS_FILES_PATH} --> ${BACKUP_FILE}) ..."
    sshpass -p "${NAS_SSH_PASSWORD}" ssh -o StrictHostKeyChecking=no ${NAS_SSH_USER}@${NAS_SSH_HOST} mkdir -p ${BACKUP_NAS_TMP_DIR}
    sshpass -p "${NAS_SSH_PASSWORD}" ssh -o StrictHostKeyChecking=no ${NAS_SSH_USER}@${NAS_SSH_HOST} tar -czhvf "${BACKUP_NAS_TMP_DIR}${BACKUP_FILE}" ${NAS_FILES_PATH}
    sshpass -p "${NAS_SSH_PASSWORD}" ssh -o StrictHostKeyChecking=no ${NAS_SSH_USER}@${NAS_SSH_HOST} ls -l ${BACKUP_NAS_TMP_DIR}
    echo "### Download backup file ..."
    sshpass -p "${NAS_SSH_PASSWORD}" scp -o StrictHostKeyChecking=no -r ${NAS_SSH_USER}@${NAS_SSH_HOST}:${BACKUP_NAS_TMP_DIR}${BACKUP_FILE} "/tmp/${BACKUP_FILE}"
    echo "### Delete remote backup file ..."
    sshpass -p "${NAS_SSH_PASSWORD}" ssh -o StrictHostKeyChecking=no ${NAS_SSH_USER}@${NAS_SSH_HOST} rm -fr "${BACKUP_NAS_TMP_DIR}${BACKUP_FILE}"
    echo "### Upload backup file (${SSH_TARGET_USER}@${SSH_TARGET_HOSTNAME}:${SSH_TARGET_PATH}) ..."
    ls -l "/tmp/${BACKUP_FILE}"
    sshpass -p "${SSH_TARGET_PASSWORD}" scp -o StrictHostKeyChecking=no -r "/tmp/${BACKUP_FILE}" ${SSH_TARGET_USER}@${SSH_TARGET_HOSTNAME}:${SSH_TARGET_PATH}
    sshpass -p "${SSH_TARGET_PASSWORD}" ssh -o StrictHostKeyChecking=no ${SSH_TARGET_USER}@${SSH_TARGET_HOSTNAME} ls -l ${SSH_TARGET_PATH}

    echo "### Cleanup local backupfile ..."
    rm -fr "/tmp/${BACKUP_FILE}"
    echo "### Cleanup old backups ..."
    OUTDATED_FILES=$(sshpass -p "${SSH_TARGET_PASSWORD}" ssh -o StrictHostKeyChecking=no ${SSH_TARGET_USER}@${SSH_TARGET_HOSTNAME} \
      find ${SSH_TARGET_PATH} -name "${BACKUP_FILE_PREFIX}*.tar.gz" -follow -mtime +22 -type f -print)
    echo $OUTDATED_FILES
    echo $OUTDATED_FILES | xargs -0 sshpass -p "${SSH_TARGET_PASSWORD}" \
      ssh -o StrictHostKeyChecking=no ${SSH_TARGET_USER}@${SSH_TARGET_HOSTNAME} rm -f
    echo "Finished!"
